x <- a:z
x <- "a":"z"
x <- 1:5
lm <- function(x) { x*x }
lm
setwd("~/Git-projects/r-bioinfo-ds/r-programing")
f <- function(x, y) {
x**2 + y/z
}
make.power <- function(n) {
pow <- function(x) {
x**n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n", environment(cube))
ls(environment(square))
get("n", environment(square))
ls(environment(cube))
get("n", environment(cube))
y <- 10
f <- function(x) {
y <- 2
y**2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
g <- function(x) {
a <- 3
x+a+y
}
g(2)
y <- 3
g(2)
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma**2)
b <- -0.5*sum(data-mu)**2) / (sigma**2)
-(a+b)
}
}
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma**2)
b <- -0.5*sum(data-mu)**2) / (sigma**2)
-(a+b)
}
}
set.seed(1); normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
plot(x, exp(-(y - min(y))), type="q")
plot(x, exp(-(y -min(y))), type="1"
